links
1. Go Exemple uso de Contexto: disponivel em -> https://gobyexample.com/context
2. Códigos HTTP: disonivel em -> https://http.dog/
3. gestao de erros de servidor usando google: disponivel em -> https://cloud.google.com/error-reporting?hl=pt-br
4. Documentação Oficial do Gin framework Golang: disponivel em -> https://github.com/gin-gonic/gin
5. Ferramentas de gerenciamento de errors: disponivel em -> https://blog.mandic.com.br/artigos/as-5-ferramentas-mais-populares-para-gerenciamento-de-log/
6. Estruturando projetos em go: disponivel em -> https://github.com/golang-standards/project-layout
7. Estruturando projetos em Go dica 2: disponivel em -> https://github.com/golang-standards/project-layout
8. arquitetura de projeto MSR
9. convertendo dados em go: disonivel em: https://pkg.go.dev/strconv
10. tirando espaços da string em golang: disponivel em -> https://linuxhint.com/trim-whitespace-golang/
11. tirando espaços da string em golang segundo link: disponivel em -> https://www.tutorialkart.com/golang-tutorial/golang-string-trim-space/
12. converte string para float e float para string: disponivel em -> https://yourbasic.org/golang/convert-string-to-float/
13. Documentando uma api: disponível em -> https://developers.themoviedb.org/3/tv/get-tv-details
14. Swagger Documentação de api: disponível em https://swagger.io/
15. Swag Documentação de API: disponível em ->  https://github.com/swaggo/gin-swagger
16. Link da documentação do swagger: disponível em -> https://swagger.io/docs/specification/describing-responses/
17. link de tutorial de test no idioma português: disponivel em -> https://larien.gitbook.io/aprenda-go-com-testes/primeiros-passos-com-go/ola-mundo
18. link de códigos go com framework gin: disponível em -> https://blog.logrocket.com/gin-binding-in-go-a-tutorial-with-examples/
19. repositorio do projeto web com go feito em aulas do bootcamp Go: disponível em -> https://github.com/diego-augusto/dh-bootcamp-01
20. acessando campos das structs: disponível em -> https://pkg.go.dev/reflect#StructField
21. link de manipulação de campos de structs: disponível em -> https://blog.logrocket.com/gin-binding-in-go-a-tutorial-with-examples/
22. Secure Design Principles: disponível em -> https://github.com/OWASP/DevGuide/blob/master/02-Design/01-Principles%20of%20Security%20Engineering.md
23. Quanto custa uma violação de dados?: disponível em -> https://www.ibm.com/br-pt/security/data-breach
24. Modelagem de Ameaças: disponível em -> https://sites.google.com/mercadolibre.com/websec/threat-modeling?authuser=0
25. OWASP Top Ten Web Application Security Risks | OWASP: disponível em -> https://owasp.org/www-project-top-ten/
26. How I learned to stop worrying (mostly) and love my threat model | Ars Technica: disponível em -> https://arstechnica.com/information-technology/2017/07/how-i-learned-to-stop-worrying-mostly-and-love-my-threat-model/
27. cadastro em plataforma de curso:  disonivel em -> https://mercadolibre.mercadolibre.auth0.com/login?state=hKFo2SAyZzB1d0daNWtiZGtLRGgtaGtRTFlSZjdQaVNCdVp3LaFupWxvZ2luo3RpZNkgaGppWFF1cTJWRHpOajRTcTlabHhTbkdUdUlVR3lFZnqjY2lk2SBzbkozZDUxZnp2a0VpQWZWeVV5cVFYMnh4TmNtNmc2Nw&client=snJ3d51fzvkEiAfVyUyqQX2xxNcm6g67&protocol=samlp&SAMLRequest=fZJfb5swFMXf%2BRTI7wFDEqJaIRJrNi1T12VNWk17M%2BYCTvyH2qYk%2B%2FRTTbs1k1a%2F3ev7O%2Ff4yEtLpehI0btW3cFjD9YFYRiGJymUJf4yR71RRFPLLVFUgiWOkV3x9YakESad0U4zLdA%2F2PsUtRaM41qN2GadI2hFWeuyqaQCrTrguu3qqmTNoVXscFCiok1b0xfiAYzlWuUojTAKRhFre9go66hyOUpxmk5wNsFX%2B2RG8IIkVz9HdA3WcUWdx1vnOkviWIJhtNKClwaii4L2rsUR0zL2acRWfZlW86T%2B9XT8yIv64Xx%2Ffvz%2BIz2dbpnMmmwxLtm%2BxPKBq4qr5v00ynHIks%2F7%2FXay%2FbbbjyLFa0rXWtlegtmBeeIM7u9u3joXPKopg1Lro%2Fc5aHP0ZqOu7dDKSy2fa%2BIjMqtXdBiGS5Jp2VF1jpNsPs2mC5wl89kML5Jl%2FBb%2FK9iRWyphs95qwdnZ95%2FPJ20kdf9%2FcxIlvsOrSe1HCUjKRVFVBqxFf3QKIfRwbYA6yJEzPaAwXgVBMNq5%2FLWr3w%3D%3D&RelayState=AblWt873gyCOQn7rwGHcjqxTCdgU-kEfTrO6Nm5V-56sOgOD9WHz7xy5AQCRlRapD0xAnJNGyxbdCHCX1Qr84NlSvkeJYWiDgD5jdcv68wdPuoh-9pYQJVOFqECs5VZZwM9EGBwREGYpEaUEv_AzWiorQMo4BpIQkYdADhMV6ykL4qO7WAnbvXtAQdBpB_ui3GtHjHF3seBDCfA3fnXTrOqgrmb0cmD0r5EiK1ubiFrBxEuG0SPu7cc4nX2WMRLh8yx7mgjEgDDquTmm_3ZVtEn2wdSk_fkS32ofsqccmCNrAvUql7boJmE2X8HQ3ORMidTU9I4g2cEnqTeZaT1efjWcvcTSX_KjdWq4nEeMgTutO9LSaw36slFOZ1Ap2xWKWjo
28. Websec - Capacitaciones & Awareness: disponivel em -> https://sites.google.com/mercadolibre.com/websec/capacitaciones-awareness?authuser=0
29. Secure Code Warrior disponivel em -> https://portal.securecodewarrior.com/#/register/723808966242
30. Cómo usar LGTM - Documentos de Google: disonivel em -> https://docs.google.com/document/d/1G7Facqz_HtKdihfC8IRfSQjwyg9-5bTxSMBeoq5cLdM/edit#heading=h.2l66u6snx2st
31. guia para plataforma fury sast: disponivel em -> https://furydocs.io/sast-orchestrator/1.4.8/guide/#/
32. Input Validation: disponivel em -> https://furydocs.io/sdlc-standards/0.0.9/guide/#/general/Input_Validation
32. Ferramenta para gera mocks para teste de integração: disponivel em -> https://github.com/vektra/mockery
32. Documentação no github do testify: disponivel em -> https://github.com/stretchr/testify#mock-package
32. 

canal no slack de segurança da informação do meli: #help-websec-capacitaciones 
grupo de segurança da informação no workplace: Ciberseguridad

uma estrutura pode ser vinculada a uma função que impementa uma interface  
esstrutura -> função -> interface 

o uso de interface permite reaproveitar código 



Arquitetura MSR 

Diretórios

Cmd -> organiza códigos que irão responder as entrada da pai como controladores que responde uma um endpoint específico 
Cmd/server
 - main.go
Cmd/server/controller
 - aplicacaoController.go

Internal -> camada responsável por organizar os códigos referênte a aplicação si, como regras de negocio, serviços internos da aplicação atual
Internal/models
 - modelo.go
Internal/services
 - services.go
internal/repository
 - repository.go 


Middleware
No framework gin temos 3 formas de implementar
1. Podemos usar um middleware para todos endpoint
2. Podemos usar um middlware em um grupo especifico de endpoints
3. Podemos usar um middlware em im endpoint especifico

Exemplo
 - router.User(meuMiddlware) para todos
 - router.User(meuMiddleware).GET("/endpoint", funcHandler) geralmente funciona para todos também
 - router.GET("/endpoint", meuMiddleware, funcHandler) para um endpoint especifico


Parando a execução do middleware usamos a func do ginásio Aborted 





Mapeamento de conhecimento aprendido em golang
Sintaxes esplanadas pelo professor
* Tipo de dados
* variáveis
* constantes
* estrutura condicionais
* estrutura repetição
* funções
* interfaces
* estrutura de dados
* lista/ slices





A aplicação será uma api para produtos frescos do mercado livre



Trabalhando com teste em Golang






